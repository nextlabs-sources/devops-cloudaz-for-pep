Description: ICENET Server Template
Mappings:
  AWSRegionAmazAMI:
    us-west-2:
      id: ami-6e590016
Parameters:
  CCInstallerS3Url:
    Description: The S3 url for Control Center installer
    Type: String
  CCVPCSecurityGroupID:
    Description: The VPC Security Group to apply to the EC2 instance
    Type: AWS::EC2::SecurityGroup::Id
  ControlCenterHost:
    Description: Hostname of the Control Center server to connect
    Type: String
  EC2SubnetIDs:
    Description: >
      The Subnets inside which EC2 isntances will be created, must in the
      VPC specified and you should specify at least 2 subnets and not more than the
      nubmer of available zones in the region (recommend per subnet per available
      zone)
    Type: List<AWS::EC2::Subnet::Id>
  EFSFileSystem:
    Description: The EFS filesystem ID for Control Center to store shared data (configuration, certificates, etc)
    Type: String
    AllowedPattern: '[A-Za-z\-0-9]*'
  ICENETDesiredCapacity:
    Description: Number of desired ICENETs to be created
    Type: String
    Default: "1"
  ICENETInstanceType:
    Default: m4.large
    Description: The instance type, such as t2.micro
    Type: String
  ICENETJvmMX:
    Default: '4096'
    Description: The jvmmx parameter for Control Center's Tomcat
    MinValue: '1536'
    Type: Number
  ICENETStorageType:
    Description: The storage type associated with this ec2 instance.
    Type: String
    Default: 'gp2'
  ICENETAllocatedStorage:
    Type: String
    Description: The allocated storage size, specified in gigabytes (GB).
    Default: '50'
  ICENETIops:
    Type: Number
    Description: >
      The number of I/O operations per second (IOPS) that the ec2 EBS provisions.
      The value must be equal to or greater than 1000.
      Specify only if you use io1 StorageType, and refer to AWS doc for allowed value
    MinValue: 1000
    MaxValue: 20000
    Default: 1000
  KeyPairName:
    Description: The SSH Keypair you want to used to connect to EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  LicenseS3Url:
    Description: The S3 url for license file
    Type: String
  Oauth2JWTSecretPluginS3Url:
    Description: The S3 url for Oauth2 JWT Secret Plugin
    Type: String
  S3AccessKeyID:
    Description: The access key ID for accessing S3 file such as installer and license file
    Type: String
  S3SecretAccessKey:
    Description: The access key secret for accessing S3 file such as installer and license file
    NoEcho: true
    Type: String
  SSLCertPassword:
    AllowedPattern: '[a-zA-Z0-9][a-zA-Z0-9#?!@$%^&*-]*'
    ConstraintDescription: Must at least has 6 characters
    Description: The SSL certificate password for the Control Center server
    MinLength: '6'
    NoEcho: true
    Type: String
  ServerInstanceProfile:
    Description: The physical ID of an instance profile
    Type: String
Conditions:
  ProvisionedIOPS: !Equals [ !Ref ICENETStorageType, 'io1' ]
Resources:
  ICENETLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          DeleteOnTermination: true
          VolumeSize: !Ref ICENETAllocatedStorage
          VolumeType: !Ref ICENETStorageType
          Iops: !If [ProvisionedIOPS, !Ref ICENETIops, !Ref "AWS::NoValue"]
      ImageId: !FindInMap [AWSRegionAmazAMI, !Ref "AWS::Region", id]
      IamInstanceProfile: !Ref ServerInstanceProfile
      InstanceType: !Ref ICENETInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
      - !Ref CCVPCSecurityGroupID
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all

          packages:
          - unzip
          - nfs-utils

          write_files:
          - path: /opt/post_controlcenter_stat.sh
            owner: root:root
            permissions: '0755'
            content: |
              #!/bin/bash
              LOGQUEUE_DIR='/opt/nextlabs/PolicyServer/server/logqueue'
              CW_JSON_OPEN='{ "Namespace": "ControlCenter", "MetricData": [ '
              CW_JSON_CLOSE=' ] }'
              SIZE_METRIC_NAME='LogqueueSize'
              COUNT_METRIC_NAME='LogQueueCount'
              INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              SIZE_METRIC_VALUE=$(find $LOGQUEUE_DIR -type f -print0 | du -scb --files0-from=- | tail -n 1 | cut -f1)
              COUNT_METRIC_VALUE=$(find /opt/nextlabs/PolicyServer/server/logqueue -type f | wc -l)
              SIZE_CW_JSON_METRIC="{ \"MetricName\": \"$SIZE_METRIC_NAME\", \"Dimensions\": [{\"Name\": \"InstanceId\", \"Value\": \"$INSTANCE_ID\"} ], \"Value\": $SIZE_METRIC_VALUE, \"Unit\": \"Bytes\" }"
              COUNT_CW_JSON_METRIC="{ \"MetricName\": \"$COUNT_METRIC_NAME\", \"Dimensions\": [{\"Name\": \"InstanceId\", \"Value\": \"$INSTANCE_ID\"} ], \"Value\": $COUNT_METRIC_VALUE, \"Unit\": \"Count\" }"
              aws cloudwatch put-metric-data --region ${AWS::Region} --cli-input-json "`echo $CW_JSON_OPEN $SIZE_CW_JSON_METRIC $CW_JSON_CLOSE`"
              aws cloudwatch put-metric-data --region ${AWS::Region} --cli-input-json "`echo $CW_JSON_OPEN $COUNT_CW_JSON_METRIC $CW_JSON_CLOSE`"
          - path: /opt/crontab
            owner: root:root
            permissions: '0644'
            content: "* * * * * /opt/post_controlcenter_stat.sh > /dev/null 2>&1\n"
          runcmd:
          - sed -i 's/ZONE=.*/ZONE="PST8PDT"/' /etc/sysconfig/clock
          - ln -sf /usr/share/zoneinfo/PST8PDT /etc/localtime
          - >-
            AWS_ACCESS_KEY_ID=${S3AccessKeyID} AWS_SECRET_ACCESS_KEY=${S3SecretAccessKey}
            aws s3 cp ${CCInstallerS3Url} /tmp/ControlCenter.zip
          - >-
            AWS_ACCESS_KEY_ID=${S3AccessKeyID} AWS_SECRET_ACCESS_KEY=${S3SecretAccessKey}
            aws s3 cp ${LicenseS3Url} /usr/local/license.dat
          - unzip -o -q /tmp/ControlCenter.zip -d /usr/local
          - chmod +x /usr/local/PolicyServer/install.sh
          - |
            cat > /usr/local/PolicyServer/cc_properties.json <<EOF
            {
              "installation_dir": "/opt/nextlabs",
              "installation_mode": "install",
              "console_install_mode": "SAAS",
              "license_file_location" : "/usr/local/license.dat",
              "ssl_certificate_password": "${SSLCertPassword}",
              "installation_type" : "custom",
              "dms_component" : "OFF",
              "dac_component" : "OFF",
              "dps_component" : "OFF",
              "dem_component" : "OFF",
              "ddac_component" : "OFF",
              "admin_component" : "OFF",
              "reporter_component" : "OFF",
              "dabs_component" : "ON",
              "dkms_component" : "ON",
              "cc_console_component" : "OFF",
              "installed_cc_host" : "${ControlCenterHost}",
              "installed_cc_port" : "8443",
              "web_service_port" : "8443",
              "web_application_port" : "443",
              "web_shutdown_port" : "8005",
              "server": {
                  "jvmms": "1024",
                  "jvmmx": "${ICENETJvmMX}"
                }
            }
            EOF
          - /usr/local/PolicyServer/install.sh -s
          - mkdir /mnt/efs
          - >-
            echo "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs 
            nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
          - mount /mnt/efs
          - rm -rf /opt/nextlabs/PolicyServer/server/certificates
          - ln -s /mnt/efs/control_center/certificates /opt/nextlabs/PolicyServer/server/certificates
          - crontab /opt/crontab
          - >-
            AWS_ACCESS_KEY_ID=${S3AccessKeyID} AWS_SECRET_ACCESS_KEY=${S3SecretAccessKey}
            aws s3 cp ${Oauth2JWTSecretPluginS3Url} /tmp/Oauth2JWTSecret-Plugin.zip
          - unzip -o -q /tmp/Oauth2JWTSecret-Plugin.zip -d /tmp/Oauth2JWTSecret-Plugin
          - mkdir -p /opt/nextlabs/PolicyServer/server/plugins/jar /opt/nextlabs/PolicyServer/server/plugins/config
          - find "/tmp/Oauth2JWTSecret-Plugin/Control Center" -type f -name "*.properties" -exec cp "{}" /opt/nextlabs/PolicyServer/server/plugins/config \;
          - find "/tmp/Oauth2JWTSecret-Plugin/Control Center" -type f -name "*.jar" -exec cp "{}" /opt/nextlabs/PolicyServer/server/plugins/jar/ \;
          - rm -rf /tmp/Oauth2JWTSecret-Plugin.zip /tmp/Oauth2JWTSecret-Plugin
          - service CompliantEnterpriseServer start
  ICENETAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref EC2SubnetIDs
      HealthCheckType: "EC2"
      LaunchConfigurationName: !Ref ICENETLaunchConfiguration
      DesiredCapacity: !Ref ICENETDesiredCapacity
      MaxSize: !Ref ICENETDesiredCapacity
      MinSize: !Ref ICENETDesiredCapacity
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ICENET
        PropagateAtLaunch: true
